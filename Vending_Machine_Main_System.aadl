package Vending_Machine_Main_System
public
	
	with Data_Model;
	with Base_Types;
	with Types;
	with SEI;

	-- main system 
	system Vending_Machine_System
	end Vending_Machine_System;
	
	system implementation Vending_Machine_System.I
		subcomponents
			--devices
			coffee_available_sensor: device DrinkAvailability.COFFEE;
			tea_available_sensor: device DrinkAvailability.TEA;
			hot_chocolate_available_sensor: device DrinkAvailability.HOT_CHOCOLATE;
			
			coffee_button: device Button.COFFEE;
			tea_button: device Button.TEA;
			hot_chocolate_button: device Button.HOT_CHOCOLATE;
			
			screen: device Screen.I;
			
			--systems and processes
			vending_machine: system Vending_Machine.I;
			controller: process Vending_Machine_Controller.I;	
			
		connections
			coffee_available_sensor_conn: port coffee_available_sensor.available -> controller.coffee_available;
			tea_available_sensor_conn: port tea_available_sensor.available -> controller.tea_available;
			hot_chocolate_available_sensor_conn: port hot_chocolate_available_sensor.available -> controller.hot_chocolate_available;
			
			coffee_button_conn: port coffee_button.pressed -> controller.coffee_button_pressed;
			tea_button_conn: port tea_button.pressed -> controller.tea_button_pressed;
			hot_chocolate_button_conn: port hot_chocolate_button.pressed -> controller.hot_chocolate_button_pressed;
			
	end Vending_Machine_System.I;

	system Vending_Machine
		features
			drink_type: in event data port; --type of drink users can choose (coffee, tea, hot chocolate)
			amount_payed: in event data port; --amount that user put in vending machine
			required_amount: out event data port; --payment that is required for chosen drink
			machine_state: out event data port Types::Vending_Machine_State;
			drink_available: out event data port;
	end Vending_Machine;
	
	system implementation Vending_Machine.I
		subcomponents
			Request_Handler: system Request_Handler.I; --for handling user requests (choosing drink)
			Payment_Module: system Payment_Module.I; --for handling payments
			Drink_Dispenser: system Drink_Dispenser.I; --for creating drinks	
	end Vending_Machine.I;
	
	process Vending_Machine_Controller
		features
			coffee_available: in data port Base_Types::Boolean;
			tea_available: in data port Base_Types::Boolean;
			hot_chocolate_available: in data port Base_Types::Boolean;
			
			coffee_button_pressed: in data port Base_Types::Boolean;
			tea_button_pressed: in data port Base_Types::Boolean;
			hot_chocolate_button_pressed: in data port Base_Types::Boolean;
			
	end Vending_Machine_Controller;
	
	process implementation Vending_Machine_Controller.I
		subcomponents
			payment_sensor: thread Payment_Sensor.I;
			drink_availability_sensor: thread Drink_Availability_Sensor.I;
			button_sensor: thread Button_Sensor.I;	
			
--		connections
--			drink_availability_sensor_conn: drink_availability_sensor.available -> 
	end Vending_Machine_Controller.I;

    system Request_Handler
	    features
	        drink_type: in event data port Types::Drink;
	        drink_available: in event data port Base_Types::Boolean;
	        required_amount: out event data port Base_Types::Integer;
	        payment_confirmed: in event data port;
	        order_confirmed: out event data port;
    end Request_Handler;

    system implementation Request_Handler.I
        --todo
    end Request_Handler.I;

    system Payment_Module
        features
            required_amount: in event port;
            payment_confirmed: out event port;
        end Payment_Module;

    system implementation Payment_Module.I
        --todo        	
    end Payment_Module.I;

    system Drink_Dispenser
        features
            drink_type: in event port;
            drink_done: out event port;
        end Drink_Dispenser;

    system implementation Drink_Dispenser.I
        --todo    		
    end Drink_Dispenser.I;
    
    thread Drink_Availability_Sensor
        features
            available: out event port;
        end Drink_Availability_Sensor;

    thread implementation Drink_Availability_Sensor.I
        --todo
    end Drink_Availability_Sensor.I;

    thread Payment_Sensor
        features
            payment_done: out event port;
        end Payment_Sensor;

    thread implementation Payment_Sensor.I
        --todo
    end Payment_Sensor.I;
    
    thread Button_Sensor
    	features
			pressed: in event data port Base_Types::Boolean;
    	properties
			Dispatch_Offset => 5ms;
		    Deadline => 100ms;	
		    Period => 150ms;
		    Compute_Execution_Time => 0ms..10ms;	
    end Button_Sensor;
    
    thread implementation Button_Sensor.I
    end Button_Sensor.I;
    
    --devices
    
    device Screen
    	features
			required_amount: out event data port;
			machine_state: out event data port Types::Vending_Machine_State;
		properties
			Dispatch_Protocol => Aperiodic; 
    end Screen;
    
    device implementation Screen.I
    end Screen.I;
    
    device Button
		features
			pressed: out event data port Base_Types::Boolean;
			bus_access: requires bus access;
		properties
			SEI::GrossWeight => 0.1kg;
			Dispatch_Protocol => Aperiodic;    		
    end Button;
    
    device implementation Button.COFFEE
    end Button.COFFEE;
    
    device implementation Button.TEA
    end Button.TEA;
    
    device implementation Button.HOT_CHOCOLATE
    end Button.HOT_CHOCOLATE;
    
    device DrinkAvailability
		features
			available: out data port Base_Types::Boolean;
    	properties
    		SEI::GrossWeight => 0.15kg;
			Period => 1000ms;
			Dispatch_Protocol => Periodic;
	end DrinkAvailability;

	device implementation DrinkAvailability.COFFEE
	end DrinkAvailability.COFFEE;

	device implementation DrinkAvailability.TEA
	end DrinkAvailability.TEA;

	device implementation DrinkAvailability.HOT_CHOCOLATE
	end DrinkAvailability.HOT_CHOCOLATE;
	
end Vending_Machine_Main_System;